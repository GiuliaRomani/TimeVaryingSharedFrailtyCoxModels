# File containging attempts of working
---------------------------------------------------------------
QuadraturePoints::Points10 points9;
    for(unsigned int i=0; i< points9.n; ++i){
        std::cout << points9.nodes[i] << std::endl;
        std::cout << points9.weights[i] << std::endl;
        std::cout << std::endl;
}
----------------------------------------------------------------

/*
// Virtual method to derive the interval variance of the frailty
void PowerParameterModel::compute_sd_frailty() {
    // Extract the useful parameter from the vector of parameters (i.e. gamma vector and sigma)
    T::VectorXdr& v_parameters = parameters.get_v_parameters();
    T::VariableType sigma = v_parameters.tail(1);

    T::IndexType begin_gamma = n_intervals + n_regressors;
    T::IndexType end_gamma = 2 * n_intervals + n_regressors - 2;
    T::VectorXdr v_gamma(n_intervals);
    v_gamma(0) = 1;
    v_gamma.block(1,0,n_intervals-1,1) = v_parameters.block(begin_gamma,0, n_intervals-1,1);

    for(const auto& p: v_gamma){
        variance_frailty(p) = (sigma * v_gamma(p)) * (sigma * v_gamma(p));
        sd_frailty(p) = sigma * v_gamma(p);
    };
};
*/


/*
// Method for initializing the vector of parameters
void Parameters::initialize_v_parameters() {
    // Resize the vector of parameters to the right dimension
    v_parameters.resize(n_parameters);

    // Define the index for storing the elements in the dynamic vector
    T::NumberType j_actual = 0;

    // Defie the engine and the distribution for the pseudo-random-number generator
    std::default_random_engine generator;
    for(T::NumberType i = 0; i < n_ranges; ++i){
        T::NumberType & n = all_n_parameters[i];
        T::VariableType & a = range_min_parameters[i];
        T::VariableType & b = range_max_parameters[i];

        std::uniform_real_distribution<> distribution(a, b);
        for(T::NumberType j = 0; j < n; ++j){
            v_parameters(j_actual) = distribution(generator);
            j_actual += 1;
        }   
    }
};
                // Initialize the vector of parameters
                // initialize_v_parameters();   
*/
    
/*
// Method for print the element of the map
void DatasetInfo::print_map_groups() const{
    for(auto& [name_group, ptr_vector_index]: map_groups){
        std::cout << "In group " << name_group << " individuals with index:"<<std::endl;
        for(auto& index: *ptr_vector_index){
            std::cout << index << std::endl;
        }
    }
};

// Method for ptinting the element of a single group 
void DatasetInfo::print_individuals_group(const T::GroupNameType& name_group) const{
    std::shared_ptr<T::VectorIndexType> individuals_group = extract_individuals_group(name_group);
    if(individuals_group == nullptr)
        std::cerr << "No group with this name!" << std::endl;
    else{
        std::cout << "Indexes in group " << name_group << std::endl;
        for(const auto i: *individuals_group)
            std::cout << i << std::endl;
    }
};
*/

